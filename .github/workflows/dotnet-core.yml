name: .NET Core

on: 
  push:
    branches-ignore:
      - 'module/**'
      - 'feature/**'

jobs:
  build:

    runs-on: windows-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.7

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.x.x'
        include-prerelease: true

#    - name: Install dependencies
#      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Fuxion.sln
    - name: Dependencies - Fuxion
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Core/Fuxion/Fuxion.csproj
    - name: Dependencies - Domain
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Core/Domain/Fuxion.Domain.csproj
    - name: Dependencies - Application
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Core/Application/Fuxion.Application.csproj
    - name: Dependencies - Drawing
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Core/Drawing/Fuxion.Drawing.csproj
    - name: Dependencies - Licensing
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Core/Licensing/Fuxion.Licensing.csproj
    - name: Dependencies - AspNetCore
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/AspNetCore/Fuxion.AspNetCore.csproj
    - name: Dependencies - AutoMapper
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/AutoMapper/Fuxion.AutoMapper.csproj
    - name: Dependencies - EntityFrameworkCore
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/EntityFrameworkCore/Fuxion.EntityFrameworkCore.csproj
    - name: Dependencies - EntityFrameworkCore.InMemory
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/EntityFrameworkCore.InMemory/Fuxion.EntityFrameworkCore.InMemory.csproj
    - name: Dependencies - EntityFrameworkCore.SqlServer
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/EntityFrameworkCore.SqlServer/Fuxion.EntityFrameworkCore.SqlServer.csproj
    - name: Dependencies - EventStore
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/EventStore/Fuxion.EventStore.csproj
    - name: Dependencies - MassTransit
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/MassTransit/Fuxion.MassTransit.csproj
    - name: Dependencies - MongoDB
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/MongoDB/Fuxion.MongoDB.csproj
    - name: Dependencies - Orleans
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/Orleans/Fuxion.Orleans.csproj
    - name: Dependencies - RabbitMQ
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/RabbitMQ/Fuxion.RabbitMQ.csproj
    - name: Dependencies - Windows
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/Windows/Fuxion.Windows.csproj
    - name: Dependencies - Windows.Controls
      run: dotnet restore -p:RestoreUseSkipNonexistentTargets=false src/Infrastructure/Windows.Controls/Fuxion.Windows.Controls.csproj

#    - name: Build
#      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Fuxion.sln
    - name: Build - Fuxion
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Core/Fuxion/Fuxion.csproj
    - name: Build - Domain
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Core/Domain/Fuxion.Domain.csproj
    - name: Build - Application
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Core/Application/Fuxion.Application.csproj
    - name: Build - Drawing
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Core/Drawing/Fuxion.Drawing.csproj
    - name: Build - Licensing
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Core/Licensing/Fuxion.Licensing.csproj
    - name: Build - AspNetCore
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/AspNetCore/Fuxion.AspNetCore.csproj
    - name: Build - AutoMapper
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/AutoMapper/Fuxion.AutoMapper.csproj
    - name: Build - EntityFrameworkCore
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EntityFrameworkCore/Fuxion.EntityFrameworkCore.csproj
    - name: Build - EntityFrameworkCore.InMemory
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EntityFrameworkCore.InMemory/Fuxion.EntityFrameworkCore.InMemory.csproj
    - name: Build - EntityFrameworkCore.SqlServer
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EntityFrameworkCore.SqlServer/Fuxion.EntityFrameworkCore.SqlServer.csproj
    - name: Build - EventStore
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EventStore/Fuxion.EventStore.csproj
    - name: Build - MassTransit
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/MassTransit/Fuxion.MassTransit.csproj
    - name: Build - MongoDB
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/MongoDB/Fuxion.MongoDB.csproj
    - name: Build - Orleans
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/Orleans/Fuxion.Orleans.csproj
    - name: Build - RabbitMQ
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/RabbitMQ/Fuxion.RabbitMQ.csproj
    - name: Build - Windows
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/Windows/Fuxion.Windows.csproj
    - name: Build - Windows.Controls
      run: dotnet build --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/Windows.Controls/Fuxion.Windows.Controls.csproj

#    - name: Run tests
#      run: dotnet test --configuration Release --no-restore --verbosity minimal src/Fuxion.sln
#    - name: Test - Fuxion
#      run: dotnet test --configuration Release --no-restore --verbosity minimal src/Core.test/Fuxion/Fuxion.Test.csproj
    - name: Test - Domain
      run: dotnet test --configuration Release --no-restore --verbosity minimal src/Core.test/Domain/Fuxion.Domain.Test.csproj
    - name: Test - Application
      run: dotnet test --configuration Release --no-restore --verbosity minimal src/Core.test/Application/Fuxion.Application.Test.csproj
    - name: Test - Licensing
      run: dotnet test --configuration Release --no-restore --verbosity minimal src/Core.test/Licensing/Fuxion.Licensing.Test.csproj
    - name: Test - Windows
      run: dotnet test --configuration Release --no-restore --verbosity minimal src/Infrastructure.test/Windows/Fuxion.Windows.Test.csproj

#    - name: Create packages
#      run: dotnet pack --configuration Release --no-build -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Fuxion.sln
    - name: Create package - Fuxion
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Core/Fuxion/Fuxion.csproj
    - name: Create package - Domain
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Core/Domain/Fuxion.Domain.csproj
    - name: Create package - Application
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Core/Application/Fuxion.Application.csproj
    - name: Create package - Drawing
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Core/Drawing/Fuxion.Drawing.csproj
    - name: Create package - Licensing
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Core/Licensing/Fuxion.Licensing.csproj
    - name: Create package - AspNetCore
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/AspNetCore/Fuxion.AspNetCore.csproj
    - name: Create package - AutoMapper
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/AutoMapper/Fuxion.AutoMapper.csproj
    - name: Create package - EntityFrameworkCore
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EntityFrameworkCore/Fuxion.EntityFrameworkCore.csproj
    - name: Create package - EntityFrameworkCore.InMemory
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EntityFrameworkCore.InMemory/Fuxion.EntityFrameworkCore.InMemory.csproj
    - name: Create package - EntityFrameworkCore.SqlServer
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EntityFrameworkCore.SqlServer/Fuxion.EntityFrameworkCore.SqlServer.csproj
    - name: Create package - EventStore
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/EventStore/Fuxion.EventStore.csproj
    - name: Create package - MassTransit
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/MassTransit/Fuxion.MassTransit.csproj
    - name: Create package - MongoDB
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/MongoDB/Fuxion.MongoDB.csproj
    - name: Create package - Orleans
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/Orleans/Fuxion.Orleans.csproj
    - name: Create package - RabbitMQ
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/RabbitMQ/Fuxion.RabbitMQ.csproj
    - name: Create package - Windows
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/Windows/Fuxion.Windows.csproj
    - name: Create package - Windows.Controls
      run: dotnet pack --configuration Release --no-build --output nupkgs -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} src/Infrastructure/Windows.Controls/Fuxion.Windows.Controls.csproj

    - name: Publish to GitHub Packages
      if: github.ref != 'refs/heads/main'
      run: dotnet nuget push "nupkgs\*.nupkg" --source https://nuget.pkg.github.com/TTiVentures/index.json --api-key ${{secrets.GITHUB_TOKEN}} --skip-duplicate

    - name: Publish to NuGet.org
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget push "nupkgs\*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_ORG}} --skip-duplicate
    